Общие рекомендации

• Этот проект необходимо выполнить на виртуальной машине.

// OK
• Все файлы, необходимые для конфигурации вашего проекта, должны быть помещены в папку srcs.

• Также необходим Makefile, который должен находиться в корне вашего каталога. Он должен настроить все ваше приложение (т.е. он должен создавать образы Docker с помощью docker-compose.yml).
• Этот предмет требует применения на практике концепций, которые, в зависимости от вашего опыта, вы, возможно, еще не усвоили. Поэтому мы советуем вам не стесняться читать много документации, связанной с использованием Docker, а также всего остального, что вы сочтете полезным, чтобы выполнить это задание.

Обязательная часть

Этот проект заключается в том, что вы настраиваете небольшую инфраструктуру, состоящую из различных служб по определенным правилам. Весь проект должен быть выполнен на виртуальной машине. Вы должны использовать docker-compose.

У каждого образа Docker должно быть то же имя, что и у соответствующей службы.
Каждая служба должна работать в выделенном контейнере.
По соображениям производительности контейнеры должны быть созданы либо из предпоследней стабильной версии Alpine Linux, либо из Debian Buster. Выбор остается за вами.
Вы также должны написать свои собственные файлы Dockerfile, по одному для каждой службы. Файлы Dockerfiles должны вызываться в файле docker-compose.yml из файла Makefile.
Это означает, что вы должны сами создавать образы Docker для своего проекта. Затем запрещается извлекать готовые образы Docker, а также использовать такие службы, как DockerHub (Alpine / Debian исключены из этого правила).

Затем вам необходимо настроить:
// OK
• Контейнер Docker, содержащий только NGINX с TLSv1.2 или TLSv1.3.
// OK
• Контейнер Docker, содержащий WordPress + php-fpm (он должен быть установлен и настроен) только без nginx.
• Контейнер Docker, содержащий MariaDB только без nginx.
• Том, содержащий вашу базу данных WordPress.

// OK
• Второй том, содержащий файлы вашего веб-сайта WordPress.
// OK
• Докер-сеть, которая устанавливает соединение между вашими контейнерами.

В случае сбоя ваши контейнеры должны перезапускаться.

Контейнер Docker - это не виртуальная машина. Таким образом, не рекомендуется использовать какие-либо хакерские патчи, основанные на 'tail -f' и т. Д., При попытке его запустить. Прочтите о том, как работают демоны и стоит ли их использовать.

Конечно, использование network: host или --link или links: запрещено. Сетевая строка должна присутствовать в вашем файле docker-compose.yml. Ваши контейнеры не должны запускаться командой, выполняющей бесконечный цикл. Таким образом, это также относится к любой команде, используемой в качестве точки входа или в сценариях точки входа. Вот несколько запрещенных хакерских патчей: tail -f, bash, sleep infinity, while true.

Прочтите о PID 1 и лучших практиках написания файлов Docker.

• В вашей базе данных WordPress должно быть два пользователя, один из которых является администратором. Имя пользователя администратора не может содержать admin / Admin или administrator / Administrator (например, admin, administrator, Administrator, admin-123 и т. Д.).

Ваши тома будут доступны в папке / home / login / data на хост-машине с помощью Docker. Разумеется, необходимо заменить логин на свой.

Чтобы упростить задачу, вы должны настроить свое доменное имя так, чтобы оно указывало на ваш локальный IP-адрес. Это доменное имя должно быть login.42.fr. Опять же, вы должны использовать свой собственный логин. Например, если ваш логин - wil, wil.42.fr будет перенаправлять на IP-адрес, указывающий на веб-сайт wil.

Последний тег запрещен. В ваших файлах Dockerfiles не должно быть пароля. Обязательно использовать переменные среды. Также настоятельно рекомендуется использовать файл .env для хранения переменных среды. Файл .env должен находиться в корне каталога srcs. Контейнер NGINX должен быть единственной точкой входа в вашу инфраструктуру только через порт 443 с использованием протокола TLSv1.2 или TLSv1.3.

Бонусная часть

В этом проекте бонусная часть должна быть простой.
Dockerfile должен быть написан для каждой дополнительной службы. Таким образом, каждый из них будет работать в своем собственном контейнере и, при необходимости, будет иметь свой выделенный том.
Список бонусов:
• Настройте кеш Redis для своего веб-сайта WordPress, чтобы правильно управлять кешем.
• Настройте контейнер FTP-сервера, указывающий на объем вашего веб-сайта WordPress.
• Создайте простой статический веб-сайт на любом языке по вашему выбору, кроме PHP (да, PHP исключен!). Например, сайт-витрина или сайт для презентации вашего резюме.
• Настроить Adminer.
• Настройте услугу по вашему выбору, которая, по вашему мнению, будет полезной. Во время защиты вам придется обосновать свой выбор.

Для завершения бонусной части у вас есть возможность настроить дополнительные услуги. В этом случае вы можете открыть больше портов в соответствии с вашими потребностями.

Бонусная часть будет оцениваться только в том случае, если обязательная часть ИДЕАЛЬНА. Идеально означает, что обязательная часть выполнена полностью и работает без сбоев. Если вы не выполнили ВСЕ обязательные требования, ваша бонусная часть вообще не будет оцениваться.
